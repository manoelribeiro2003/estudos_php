Sempre que se atualiza a pagina php "Cadastro de Alunos" (php_manoel\escola\cadastroAluno.php) é adicionado um novo registro ao bd porém não é mostrado o novo registro e sim o registro adicionado do formulario


SELECT - seleciona registro com base em filtros
* ou <`OutroAtributo`> - indica o que vai ser selecionado

WHERE - aplica filtros
`<atributo>` = <valor> - condição

LIKE - usado com o filtro WHERE para buscar por um  padrão especifico em uma coluna


'a%'	Qualquer valor que começa com "a"
'%a'	Qualquer valor que termina com "a"
'%or%'	Qualquer valor que contêm "or" em qualquer posição 
'_r%'	Encontra quaisquer valores que tenham "r" na segunda posição
'a_%'	Encontra quaisquer valores que comecem com "a" e tenham pelo menos 2 caracteres de comprimento
'a__%'	Encontra quaisquer valores que comecem com "a" e tenham pelo menos 3 caracteres de comprimento
'a%o'	Encontra quaisquer valores que comecem com "a" e terminem com "o"


SELECT <colunas> FROM <tabela> WHERE <colunas> LIKE <valor procurado;

SELECT * FROM produtos WHERE produto LIKE "b%";

UPDATE <tabela> SET <nome da coluna>  = 'valor atual' WHERE <nome da coluna> = <valor procurado>

UPDATE produtos SET valor = '1.00' WHERE id = 1;


CREATE DATABASE empresa;  -> CRIAR UM BANCO DE DADOS

use empresa;  -> ESPECIFICAR O BANCO DE DADOS UTILIZADO


//CREATE <NOME DA TABELA>(
<NOME DO CAMPO> <TIPO DE DADOS>(<TAMANHO DO TIPO DE DADO>),
...);

CREATE TABLE Pessoa(
id_pessoa int NOT NULL AUTO_INCREMENT,
nome varchar(255),
sobrenome varchar(255),
idade int,
PRIMARY KEY (id_pessoa)
);

ALTER TABLE empresa.pessoa 
ADD email varchar(100) not null, 
ADD profissao varchar(100);

//RENOMEAR TABELA
ALTER TABLE pessoa CHANGE id_pessoa id int;

//REMOVER UMA COLUNA
ALTER TABLE empresa.pessoa
DROP COLUMN email;


//COMANDOS DROP 
DROP TABLE empresa.pessoa;
DROP DATABASE empresa; 

//SELECT, ORDER BY
SELECT * FROM produtos ORDER BY produto;
SELECT * FROM produtos ORDER BY produto DESC | ASC;

//CONTAR - FUNÇÃO COUNT()
SELECT COUNT(*) FROM produtos;
SELECT COUNT(*) FROM produtos WHERE validade < '2024-01-01';

//SELECIONAR A MEDIA - FUNÇÃO AVG()
SELECT AVG(valor) FROM produtos;

//SOMAR -FUNÇÃO SUM()
SELECT SUM(valor) FROM produtos;

//MAXIMO E MINIMO
SELECT MAX(validade) FROM produtos;
SELECT MIN(validade) FROM produtos;

//ALIAS
SELECT MAX(validade) as maiorValid FROM produtos;

//SELECIONAR A DIFERENÇA DE DATAS - E DANDO UM ALIAS PARA O RESULTADO - EXISTEM MUITOS OUTRO PARAMETROS DE TEMPO
SELECT TIMESTAMPDIFF(DAY, NOW(), validade) AS prazo FROM produtos;
SELECT TIMESTAMPDIFF(MONTH(ㆆ_ㆆ), NOW(), validade) AS prazo FROM produtos;
SELECT TIMESTAMPDIFF(YEAR, NOW(), validade) AS prazo FROM produtos;

//SELECIONA O LIMITE DE ONDE DEVE COMEÇAR E TERMINAR 
SELECT * FROM `produtos` LIMIT 1, 5;

Com o objetivo de fazer um sistema que armazene pacientes e atendimentos para uma melhor 
gestão e armazenagem dos dados, crie um banco de dados com duas tabelas chamadas Pacientes e Atendimentos.


A tabale Pacientes deverá conter os atributos id do paciente, nome, sexo, data de nascimento e cpf.
A tabela Atendimentos deverá conter os atributos id do atendimento, data do atendimento, tipo de urgencia do atendimento e a qual paciente está vinculado.

Para a realização dos cadastros, use procedimentos que obriguem o preenchimento dos dados de modo que sejam todos obrigatorios (javascript).
Use metodos de formularios usando o php.

Ao criar as tabelas e fomularios, crie paginas de modo que listem os pacientes que estão cadastrados e opção de cadastrar pacientes.
Também crie formularios para cadastrar atendimentos de modo que haja uma opção (como se fosse um dropdown) para listar os pacientes disponiveis para os atendimentos.
Também crie uma pagina que liste os atendimentos por ordem de urgencia.

Para a realização de tal procedimento está disponivel o xampp, vscode e phpmyadmin.